package symreg;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Comparator;
import java.util.List;

import net.sf.jclec.AlgorithmEvent;
import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;
import net.sf.jclec.algorithm.PopulationAlgorithm;
import net.sf.jclec.listener.PopulationReporter;
import net.sf.jclec.util.IndividualStatistics;

/**
 * This class is a listener for PopulationAlgorithms, that performs a report of
 * the actual population. This report consists on ...
 * 
 * @author Sebastian Ventura
 */

public class MyPopulationReporter extends PopulationReporter {
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -6866004037911080430L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////

	/** Report file */

	private File reportFile;

	/** Report file writer */

	private FileWriter reportFileWriter;

	/** Directory for saving complete populations */

	private File reportDirectory;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	public MyPopulationReporter() {
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// IConfigure interface

	// IAlgorithmListener interface

	@Override
	public void algorithmStarted(AlgorithmEvent event) {
		// Create report title for this instance
		String dateString = String.valueOf(System.currentTimeMillis()); // ----------------------------------------------------
		String actualReportTitle = getReportTitle() + dateString;
		// If save complete population create a directory for storing
		// individual population files
		if (isSaveCompletePopulation()) {
			reportDirectory = new File(actualReportTitle);
			if (!reportDirectory.mkdir()) {
				throw new RuntimeException("Error creating report directory");
			}
		}
		// If report is stored in a text file, create report file
		if (isReportOnFile()) {
			reportFile = new File(actualReportTitle + ".report.txt");
			try {
				reportFileWriter = new FileWriter(reportFile);
				reportFileWriter.flush();
				reportFileWriter.write(dateString + ";" + dateString + ";" + dateString + "\n"); // yo
																									// header
				// reportFileWriter.write(); //yo header

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// Do an iteration report
		doIterationReport((PopulationAlgorithm) event.getAlgorithm(), true);
	}

	@Override
	protected void doIterationReport(PopulationAlgorithm algorithm, boolean force) {
		// Fitness comparator
		Comparator<IFitness> comparator = algorithm.getEvaluator().getComparator();
		// Population individuals
		List<IIndividual> inhabitants = algorithm.getInhabitants();
		// Actual generation
		int generation = algorithm.getGeneration();

		// Check if this is correct generation
		if (!force && generation % getReportFrequency() != 0) {
			return;
		}

		// Save population individuals (if this option was chosen)
		if (isSaveCompletePopulation()) {
			String filename = "generation" + generation + ".individuals.txt";
			File file = new File(reportDirectory, filename);
			FileWriter filewriter;
			try {
				filewriter = new FileWriter(file);
				for (IIndividual ind : inhabitants) {
					filewriter.flush();
					filewriter.write(ind + "\n");
				}
				filewriter.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		// Do population report
		StringBuffer sb = new StringBuffer();
		// StringBuffer sb = new StringBuffer("Generation " + generation + "
		// Report\n");
		// Best individual
		IIndividual best = IndividualStatistics.bestIndividual(inhabitants, comparator);
		sb.append(generation + ";Best individual; " + best + "\n");
		// Worst individual
		IIndividual worst = IndividualStatistics.worstIndividual(inhabitants, comparator);
		sb.append(generation + ";Worst individual; " + worst + "\n");
		// Median individual
		IIndividual median = IndividualStatistics.medianIndividual(inhabitants, comparator);
		sb.append(generation + ";Median individual; " + median + "\n");
		// Average fitness and fitness variance
		double[] avgvar = IndividualStatistics.averageFitnessAndFitnessVariance(inhabitants);
		sb.append(generation + ";Average fitness;" + avgvar[0] + "\n");
		sb.append(generation + ";Fitness variance;" + avgvar[1] + "\n");
	
		
		// Write report string to the standard output (if necessary)
		if (isReportOnCconsole()) {
			System.out.println(sb.toString());
		}

		// StringBuffer sb2 = new StringBuffer(""); // yo
		// sb.append("Average fitness and Fitness variance;" + avgvar[0] + ";"+
		// avgvar[1] + "\n"); // yo

		// Write string to the report file (if necessary)
		if (isReportOnFile()) {
			try {
				reportFileWriter.write(sb.toString());
				reportFileWriter.flush();
				// reportFileWriter.write(sb2.toString()); // yo
				// reportFileWriter.flush(); // yo
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
